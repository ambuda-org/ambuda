#! /usr/bin/bash

AMBUDA_DEPLOY_CONFDIR=${HOME}/deploy-config/
AMBUDA_WORKSPACE=${HOME}

function usage {
    echo "Usage: $0 -i <image > <command option> # Setup database"
    echo "          -c # Setup directory"
    echo "          -d # Setup database"
    echo "          -l # Status of Ambuda server"
    echo "          -s # Start Ambuda"
    echo "          -x # Stop Ambuda"
    echo "          -v # Show version"
    echo "          -h # Help"
    exit 1
}

function find_unused_port {
    BOTTOM_PORT=5001
    TOP_PORT=5100

    for port in `seq $BOTTOM_PORT $TOP_PORT`
    do
        echo "hello" > /dev/tcp/$AMBUDA_HOST_IP/$port
        if [ "$?" -ne 0 ]
        then
            echo "$port"
            return
        fi
    done
    echo "Error! No unused ports found between $BOTTOM_PORT-$TOP_PORT"
    exit 1
}

function init_staging_env {
    
    if [ -z "$AMBUDA_STAGING_DIR" ]
    then
        exit "Error! Invalid staging directory"
        exit 1
    fi
    
    mkdir -p "$AMBUDA_STAGING_DIR"
    if [ "$?" -ne 0 ]
    then
        echo "Error! staging directory -- $AMBUDA_STAGING_DIR -- create failed."
        exit 1
    else
        echo "export AMBUDA_STAGING_DIR=$AMBUDA_STAGING_DIR" >> $AMBUDA_STAGING_ENV
        echo "> Change directory to $AMBUDA_STAGING_DIR"
    fi
    
    
    echo "export AMBUDA_HOST_IP=$(ip route get 1 | awk '{print $7; exit}')" >> $AMBUDA_STAGING_ENV
    source $AMBUDA_STAGING_ENV

    echo "export AMBUDA_HOST_PORT=$(find_unused_port)" >> $AMBUDA_STAGING_ENV

    if [ -z "$AMBUDA_IMAGE" ]
    then
        echo "Error! Invalid AMBUDA_IMAGE"
        exit 1
    else
        echo "export AMBUDA_IMAGE=$AMBUDA_IMAGE" >> $AMBUDA_STAGING_ENV
    fi
}

function setup_staging {
    if [ ! -e "$AMBUDA_STAGING_ENV" ]
    then
        echo "Error! Invalid Ambuda staging environment."
        exit 1
    fi
    source $AMBUDA_STAGING_ENV
    cd $AMBUDA_STAGING_DIR
}

function setup_database {
    docker compose -f ${AMBUDA_DEPLOY_CONFDIR}/docker-compose-dbsetup.yml up
    echo "> Ambuda Database...UP"
}

function start_webapp {
    docker compose -f ${AMBUDA_DEPLOY_CONFDIR}/docker-compose.yml up --detach
    echo "> Ambuda URL........http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT} is UP"
}

function start_ambuda {
    docker compose -f ${AMBUDA_DEPLOY_CONFDIR}/docker-compose.yml up --detach
    if [ "$?" -ne 0 ]
    then
        echo "Error! > Ambuda URL........http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT} failed"
        exit 1
    fi
    echo "> Ambuda URL........http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT} is UP"
}

function stop_ambuda {
    docker compose -f ${AMBUDA_DEPLOY_CONFDIR}/docker-compose.yml stop && docker compose -f ${AMBUDA_DEPLOY_CONFDIR}/docker-compose.yml rm -v -s -f
    if [ "$?" -ne 0 ]
    then
        echo "Error! > Ambuda URL........http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT} failed to stop"
        exit 1
    fi
    
    cd $(dirname "${AMBUDA_STAGING_DIR}")
    echo "Removing $AMBUDA_STAGING_DIR"
    rm -rf $AMBUDA_STAGING_DIR
    docker image rm $AMBUDA_IMAGE
    echo "Ambuda URL http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT} is STOPPED"
}


function status_ambuda {
    docker compose -f ${AMBUDA_DEPLOY_CONFDIR}/docker-compose.yml ps
    if [ "$?" -ne 0 ]
    then
        echo "Error! > Ambuda URL........http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT} failed to stop"
        exit 1
    fi
    
    echo "http://${AMBUDA_HOST_IP}:${AMBUDA_HOST_PORT}"
}


# Main

while getopts "i:dlsxh" op; do
    case "${op}" in
        
        d)
            setup_staging
            setup_database
            ;;
        i)
            export AMBUDA_IMAGE=$OPTARG
            export AMBUDA_STAGING_DIR=${AMBUDA_WORKSPACE}/${AMBUDA_IMAGE#ghcr.io/kvchitrapu/ambuda:}
            export AMBUDA_STAGING_ENV=$AMBUDA_STAGING_DIR/.env
            ;;
        l)
            setup_staging
            status_ambuda
            ;;
        s)
            init_staging_env
            setup_staging 
            start_ambuda
            ;;
        x)
            setup_staging
            stop_ambuda
            ;;
        *)
            usage
            ;;
    esac
done

exit 0