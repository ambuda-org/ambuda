ARG BUILD_TYPE=release

## 1. Build the base image. This build is a rare event.
FROM python:3.10.10-slim-buster as base
ENV PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1
WORKDIR /app
RUN apt-get update && apt-get install -y --no-install-recommends curl && curl -sL https://deb.nodesource.com/setup_16.x | bash -
RUN apt-get install -y --no-install-recommends nodejs && apt-get remove -y curl && rm -rf /var/lib/apt/lists/* && echo "************* Base image build succeeded! *****************"

# ####################################
## 2.1 bring build tools for dev #####
# ####################################

FROM base as build-py-dev

# Setup build environment
ENV PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=1 \
  PIP_DISABLE_PIP_VERSION_CHECK=1 \
  PIP_DEFAULT_TIMEOUT=100 \
  POETRY_VERSION=1.4.1

# Install all dependencies. Python venv 
RUN pip install "poetry==$POETRY_VERSION"
RUN apt-get update && apt-get install -y --no-install-recommends make gcc python3-dev && apt-get install -y --reinstall build-essential && python -m venv /venv
COPY pyproject.toml poetry.lock ./

RUN poetry export --without-hashes --dev -f requirements.txt | /venv/bin/pip install -r /dev/stdin && echo "************* Python dev dependencies build succeeded! *****************"

# ####################################
## 2.2 bring build tools for release
# ####################################

FROM base as build-py-release

# Setup build environment
ENV PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=1 \
  PIP_DISABLE_PIP_VERSION_CHECK=1 \
  PIP_DEFAULT_TIMEOUT=100 \
  POETRY_VERSION=1.4.1

# Install all dependencies. Python venv 
RUN pip install "poetry==$POETRY_VERSION"
RUN apt-get update && apt-get install -y --no-install-recommends make gcc python3-dev && apt-get install -y --reinstall build-essential && python -m venv /venv

# setup python config and install
COPY pyproject.toml poetry.lock ./
RUN poetry export --without-hashes -f requirements.txt | /venv/bin/pip install -r /dev/stdin 

# ####################################
## 3.1 bring js dependencies and code
# ####################################

FROM base as build-js-release

WORKDIR /app

# Install Node dependencies to /app/node_modules/
COPY package.json package-lock.json tailwind.config.js /app/
RUN npm ci

# Copy source to temporary directory. This stage is a disposal layer. Removing /tmp/ambuda is non-issue
COPY ./ambuda/ /app/ambuda/

# Copy css
RUN npx tailwindcss -i /app/ambuda/static/css/style.css -o /app/ambuda/static/gen/style.css --minify

# Copy js
RUN npx esbuild /app/ambuda/static/js/main.js --outfile=/app/ambuda/static/gen/main.js --bundle --minify

RUN echo "************* JS code build succeeded! *****************"

# ####################################
## 4. Copy Ambuda codes
# ####################################

FROM base as build-ambuda 

ARG BUILD_TYPE=release

RUN echo "************* Building FINAL ${BUILD_TYPE} *****************"
COPY --from=build-py-release /venv /venv
COPY --from=build-js-release /app /app

# Setup build environment
ENV PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=1 \
  PIP_DISABLE_PIP_VERSION_CHECK=1 \
  PIP_DEFAULT_TIMEOUT=100 \
  POETRY_VERSION=1.4.1 \
  PYTHONPATH=${PYTHONPATH}:/app/


# Install all dependencies. Python venv 
RUN apt-get update && apt-get install -y --no-install-recommends git

### TODO: Move Translations to the bottom image
# Install all i18n files
RUN . /venv/bin/activate && python /app/ambuda/scripts/fetch_i18n_files.py && pybabel compile -d /app/ambuda/translations -f

# specific files
COPY config.py /app/
COPY wsgi.py /app/
COPY alembic.ini /app/
COPY migrations/ /app/migrations/
COPY scripts/ /app/scripts/
COPY cli.py /app/scripts/
RUN echo "************* Ambuda application build succeeded! ****************"

# ####################################
## 5. Finalize the image
# ####################################

FROM base as final

ARG BUILD_TYPE=release
WORKDIR /app

RUN echo "************* Building FINAL ${BUILD_TYPE}*****************"
COPY --from=build-ambuda /venv /venv
COPY --from=build-ambuda /app /app
CMD ["/app/scripts/start_server.sh"]
RUN echo "************* Ambuda deploy succeeded! *****************"
