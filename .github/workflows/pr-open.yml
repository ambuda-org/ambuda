# Ambuda workflow to build and publish docker image

name: Build publish and staging

env:
  AMBUDA_VERSION: v0.1
  AMBUDA_HOST_IP: 127.0.0.1
  AMBUDA_HOST_PORT: 5090
  AMBUDA_REGISTRY: ghcr.io
  
on:
  push:
     branches:
       - 'main'
  pull_request:
    branches:
      - 'main'
    types: [opened, reopened]

jobs:
  push_to_registries:
    name: Push Ambuda image to GH container registry
    runs-on: ubuntu-22.04
    environment: staging
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Check IP address
        run : |
          echo "AMBUDA_HOST_IP=$(ip route get 1 | awk '{print $7; exit}')" >> $GITHUB_ENV
          curl https://api.ipify.org
      
      - name: GH container registry login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch,value=v0.1-{{branch}}-{{sha}}
            type=ref,event=pr,value=pr-{{branch}}-{{sha}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,event=push,value=v0.1-{{branch}}-{{sha}}
      
      - name: Build and push Docker images
        id: publish
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: build/containers/Dockerfile.final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Run SQL db setup
        id: dbsetup
        run: docker compose -f deploy/local/docker-compose-dbsetup.yml up
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}
          
      - name: Run Docker images
        id: deploy
        run: docker compose -f deploy/local/docker-compose.yml up --detach
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}
          
      - name: Check that site is running
        run: timeout 24m bash -c "until curl --fail-with-body $AMBUDA_HOST_IP:$AMBUDA_HOST_PORT; do sleep 12m; done"
        
      - name: Show logs on fail
        if: ${{ failure() }}
        run: docker compose -f deploy/local/docker-compose.yml logs
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}

      - name: Extract Image tag
        shell: bash
        run: echo "${AMBUDA_IMAGE}" >> image-name
        id: extract_image_details
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}

      - uses: actions/upload-artifact@v3
        with:
          name: image-name
          path: image-name
  
  pr_commented:
    # This job only runs on PR open or reopen
    name: PR comment
    needs: push_to_registries
    if: ${{ github.event.issue.pull_request.opened || github.event.issue.pull_request.reopened }}
    runs-on: ubuntu-latest
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: 'Your pull request is open. Reviewers will review the pullrequest at the earliest.'
          reactions: '+1'
  
  deploy_staging:
    name: Run staging deploy
    needs: push_to_registries
    runs-on: [self-hosted, staging, linux]
    environment: staging
    steps:
      - uses: actions/download-artifact@v3
        id: image-name
        with:
          name: image-name

      - name: extract_image_details
        shell: bash
        run: |
          echo "AMBUDA_IMAGE=`cat image-name`" >> $GITHUB_ENV
          echo "AMBUDA_IMAGE_TAG=${AMBUDA_IMAGE#ghcr.io/kvchitrapu/ambuda:}" >> $GITHUB_ENV
          cat image-name

      - name: Start the deploy job
        id: stagingdeploy
        run: bash /home/ambuda-devbot/bin/ambuda-runner -i ${{ env.AMBUDA_IMAGE }} -s
      
