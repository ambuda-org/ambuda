# Ambuda workflow to build and publish docker image

name: Publish Ambuda image
env:
  AMBUDA_VERSION: v0.1
  AMBUDA_HOST_IP: 127.0.0.1
  AMBUDA_HOST_PORT: 5090

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  push_to_registries:
    name: Push Ambuda image to GH container registry
    runs-on: ubuntu-22.04
    environment: staging
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: GH container registry login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,value=v0.1-{{branch}}-{{sha}}
            type=ref,event=pr,value=pr-{{branch}}-{{sha}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,event=push,value=v0.1-{{branch}}-{{sha}}
      
      - name: Build and push Docker images
        id: publish
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: build/containers/Dockerfile.final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Run SQL db setup
        id: dbsetup
        run: docker compose -f deploy/local/docker-compose-dbsetup.yml up
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}
          

      - name: Run Docker images
        id: deploy
        run: docker compose -f deploy/local/docker-compose.yml up --detach
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}
          
      - name: Check that site is running
        run: timeout 2m bash -c "until curl --fail-with-body $AMBUDA_HOST_IP:$AMBUDA_HOST_PORT; do sleep 1; done"
        
      - name: Show logs on fail
        if: ${{ failure() }}
        run: docker compose -f deploy/local/docker-compose.yml logs
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}

      - name: Extract Image tag
        shell: bash
        run: echo "image_tag_only=${AMBUDA_IMAGE#ghcr.io/kvchitrapu/ambuda:}" >> $GITHUB_OUTPUT
        id: extract_image_tag_only
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[1] }}

      - name: Staging Files
        id: staging_files
        uses: appleboy/scp-action@v0.1.3 # replace this with current version from https://github.com/digitalocean/app_action/releases
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_KEY }}
          port: ${{ secrets.DO_PORT }}
          source: "deploy/staging/ambuda-runner, deploy/staging/docker-compose.yml, deploy/staging/docker-compose-dbsetup.yml" 
          target: ${{ steps.extract_image_tag_only.outputs.image_tag_only }}
          command_timeout: 2m
          debug: true

      - name: Run staging deploy
        id: stagingdeploy
        uses: appleboy/ssh-action@v0.1.6 # replace this with current version from https://github.com/digitalocean/app_action/releases
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_KEY }}
          port: ${{ secrets.DO_PORT }}
          command_timeout: 5m
          debug: true
          envs: AMBUDA_IMAGE, AMBUDA_HOST_PORT, AMBUDA_HOST_IP
          script: | 
            bash ${{ steps.extract_image_tag_only.outputs.image_tag_only }}/ambuda-runner -s
        env:
          AMBUDA_IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          AMBUDA_HOST_IP: ${{ secrets.DO_HOST }}
          AMBUDA_HOST_PORT: 5010
        